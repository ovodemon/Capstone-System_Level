#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Feb 13 15:13:10 2024

@author: zhouy24
"""

import jax
import jax.example_libraries.optimizers as opt
import jax.numpy as jnp
import matplotlib.pyplot as plt  # plotting
import sax
from tqdm.notebook import trange


def coupler(coupling=0.4) -> sax.SDict:
    tau = (1 - coupling) ** 0.5
    coupler_dict = sax.reciprocal(
        {
            ("in0", "out0"): tau,
        }
    )
    return coupler_dict


def taper(coupling=0.6) -> sax.SDict:
    tau = (1 - coupling) ** 0.5
    taper_dict = sax.reciprocal(
        {
            ("in0", "out0"): tau,
        }
    )
    return taper_dict

def ninetybend(transmision=0.5) -> sax.SDict:
    tau = transmision ** 0.5
    ninetybend_dict = sax.reciprocal(
        {
            ("in0", "out0"): tau,
        }
    )
    return ninetybend_dict
    
def sbend(transmision=0.5) -> sax.SDict:
    tau = transmision ** 0.5
    sbend_dict = sax.reciprocal(
        {
            ("in0", "out0"): tau,
        }
    )
    return sbend_dict
    

def powercombine(transmision=0.5) -> sax.SDict:
    tau = transmision ** 0.5
    powercombine_dict = sax.reciprocal(
        {
            ("in0", "out0"): tau,
            ("in1", "out0"): tau,
        }
    )
    return powercombine_dict

def coupler_taper() -> sax.Model:
    coupler_taper,_ = sax.circuit(
        netlist={
            "instances": {
                "lft": "coupler",
                "rgt": "taper",
            },
            "connections": {
                "lft,out0": "rgt,in0",
            },
            "ports": {
                "in0": "lft,in0",
                "out0": "rgt,out0",
            },
        },
        models={
            "coupler": coupler,
            "taper": taper,
        },
    )
    return coupler_taper



mzi, info = sax.circuit(
    netlist={
        "instances": {
            "lft": "coupler",
            "rgt": "taper",
        },
        "connections": {
            "lft,out0": "rgt,in0",
        },
        "ports": {
            "in0": "lft,in0",
            "out0": "rgt,out0",
        },
    },
    models={
        "coupler": coupler_taper(),
        "taper": taper,
    },
)
